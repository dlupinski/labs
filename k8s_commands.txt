# get current context (read from .kube/config)
kubectl config current-context

# get namespaces 
kubectl get namespaces

# get yaml manifest for a pod
kubectl get pod nginx-duane -o yaml | less

# list all pods (including IP details)
kubectl get pods -o wide
NAME          READY   STATUS    RESTARTS   AGE   IP           NODE                   NOMINATED NODE   READINESS GATES
httpd-duane   1/1     Running   0          23h   10.42.0.10   lima-rancher-desktop   <none>           <none>
nginx-duane   1/1     Running   0          23h   10.42.0.9    lima-rancher-desktop   <none>           <none>

# describe a pod
kubectl describe pod nginx-duane

# start a pod
kubectl run nginx-duane --image=nginx

# edit a pod
kubectl edit pod httpd-duane

# get just a yaml file
kubectl run nginx-yaml --image=nginx --dry-run=client -o yaml

# get the yaml and write to a file
kubectl run nginx --image=nginx --dry-run=client -o yaml > nginx.yaml

# apply yaml file to a cluster
kubectl create -f nginx.yaml
# or
kubectl apply -f nginx.yaml

# describe it
kubectl describe pod nginx-yaml

# delete a pod
kubectl delete pod nginx-yaml

# execute a command to get "into a pod" (getting an interactive shell)
#  to control pod at os level (in this case for a pod named nginx-docs)
#  to explore file system, run os commands such as top, etc
kubectl exec -it nginx-docs -- /bin/bash

####################DEPLOYMENTS ##############################
# deployments
kubectl create deployment -h | less 

# create a deployment with three replicas
kubectl create deploy test --image=httpd --replicas=3

kubectl get deployments

# to edit a deployment (similar to kubectl edit pod)
kubectl edit deployment test

# one method to generate yaml w/o having to create the pod (w/ --dry-run)
k run duane --image=nginx --dry-run=client -o yaml

# ONE METHOD TO GENERATE YAML FOR DEPLOYMENTS
k create deploy test --image=httpd --replicas=10 --dry-run=client -o yaml > deploy.yaml

# create a deployment from a file
kubectl apply -f deploy.yaml


# replicaset - group of pods - kubernetes manages replicasets (not manually administered)
kubectl get replicaset
kubectl describe replicaset

# get namespaces
kubectl get namespaces

kubectl create namespace duane -o yaml --dry-run=client
#output of above command
apiVersion: v1
kind: Namespace
metadata:
  name: duane
spec: {}
status: {}

k create namespace mealie --dry-run=client -o yaml > namespace.yaml

# create a pod in an assigned namespace
kubectl run duane-mealie --image=nginx --namespace mealie

# update context and set new default namespace
kubectl config set-context --current --namespace=mealie
Context "rancher-desktop" modified.


### SERVICES ###########
# service has an IP address that will remain constant (i.e. endpoint)
# creates an IP by default for the service
# types of services
    ClusterIP
    NodePort (generally not used)
    LoadBalancer (to create an external IP - often used in the cloud if not using Ingress)


#   LOAD BALANCER   #
#used for cloud providers.  will create an azure loadbalancer to route traffic into the k8s cluster
# CAN GIVE A SERVICE AN EXTERNAL IP BY USING A LOAD BALANCER - to reach your SERVICES FROM OUTSIDE THE KUBERNETES CLUSTER

kubectl get service

k expose deployment frontend --port 8080
k get service
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
frontend     ClusterIP   10.43.92.252   <none>        8080/TCP   45s

kubectl get service -o wide

get service -o wide
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE     SELECTOR
frontend     ClusterIP   10.43.92.252   <none>        8080/TCP   99s     app=frontend


# INGRESS - key point URLs are exposed via INGRESS

#### LOGIN TO CONTAINER VIA BASH SHELL (EXAMPLE) ###
k exec -it nginx-storage -- bash
# or to connect to a specific container (use -c or --container):
k exec -it nginx-storage -c busybox -- /bin/sh

### cannot add/modify containers in a running pod, must delete pod first  ###
k delete pod nginx-storage


# PERSISTENT VOLUME 
# get pv claim info
k get pvc
NAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE
mealie-data   Bound    pvc-19ec8a32-8f96-42e2-ba37-33634d0e4c74   10Mi       RWO            local-path     <unset>                 6m53s

# get pv info
k get persistentvolume
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE
pvc-19ec8a32-8f96-42e2-ba37-33634d0e4c74   10Mi       RWO            Delete           Bound    mealie/mealie-data   local-path     <unset>                          86s


# STORAGE CLASSES #
# get available storage CLASSES
k get storageclasses.storage.k8s.io
NAME                   PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
local-path (default)   rancher.io/local-path   Delete          WaitForFirstConsumer   false                  13d


# HELM
helm repo add oben01 https://oben01.github.io/charts/
"oben01" has been added to your repositories

(base) Duanes-iMac:labs duanelupinski$ helm repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "oben01" chart repository
Update Complete. ⎈Happy Helming!⎈
(base) Duanes-iMac:labs duanelupinski$ helm repo list
NAME  	URL                             
oben01	https://oben01.github.io/charts/

(base) Duanes-iMac:labs duanelupinski$ helm install homarr oben01/homarr --namespace homarr --create-namespace
NAME: homarr
LAST DEPLOYED: Sun Oct 12 12:14:55 2025
NAMESPACE: homarr
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
1. Get the application URL by running these commands:
  http://chart-example.local/
